import os
from datetime import datetime, timedelta
from celery import shared_task
from celery.utils.log import get_task_logger
from django.utils import timezone
from django.db.models import Prefetch
import requests
from pyrogram.errors import FloodWait
import time

#—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–≤–µ —Å—Ç—Ä–æ—á–∫–∏ –Ω–∏–∂–µ –Ω–∞–¥–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –≤ parsing_service —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
#–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"

from .models import User, Like

logger = get_task_logger(__name__)

users = ['337420370']
# —Ç–∞–º –º–æ–π user_id —Å—Ç–æ–∏—Ç
TELEGRAM_BOT_TOKEN = "—Ç–æ–∫–µ–Ω"
BOT_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"


@shared_task
def send_daily_notifications():

    today = timezone.now().date()

    users = User.objects.prefetch_related(
        Prefetch(
            'likes',
            queryset=Like.objects.filter(
                value=True,
                content__date_start__date=today  # –°–æ–±—ã—Ç–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å–µ–≥–æ–¥–Ω—è
            ).select_related('content')
        )
    ).distinct()


    for user in users:

        relevant_likes = user.likes.all()

        if not relevant_likes:
            continue


        init_message = f"üéâ –ü—Ä–∏–≤–µ—Ç!\n–ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\nüîó "
        end_message = f"–ü—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –∏ –º–æ—Ä–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π! –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è! üòä‚ú®"

        message_lines = []

        init_message = init_message if len(relevant_likes) == 1 else init_message.replace('–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')

        for like in relevant_likes:
            event = like.content
            link = f"https://t.me/EventAfishaBot/strelka?startapp={like.content.id}"
            message_lines.append(f"- [{event.name}]({link})")

        message_lines.append(end_message)
        message = f'{init_message}' + "\n".join(message_lines) + end_message

        try:
            response = requests.post(
                BOT_API_URL,
                json={
                    "chat_id": user.telegram_id,
                    "text": message,
                    "parse_mode": "Markdown"
                }
            )
            response.raise_for_status()
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")

        except FloodWait as e:
            wait_time = e.value + 5
            logger.warning(f"FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
            time.sleep(wait_time)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

    logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")