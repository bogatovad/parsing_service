import logging
from django.core.management.base import BaseCommand
from django.utils import timezone
from django.db.models import F, Q
from frameworks_and_drivers.django.parsing.data_manager.models import Content

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = "Delete outdated events based on date conditions"

    def add_arguments(self, parser):
        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="Show what would be deleted without actually deleting",
        )

    def handle(self, *args, **options):
        dry_run = options["dry_run"]

        try:
            self.stdout.write("üßπ Starting deletion of outdated events")
            self.stdout.write(f"‚è∞ Task execution time: {timezone.now()}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ UTC
            today = timezone.now().date()

            self.stdout.write(
                f"üìÖ Deleting events that ended before {today} (UTC). Today is {today}"
            )
            self.stdout.write(f"üåç Current timezone: {timezone.get_current_timezone()}")

            # 1. –°–æ–±—ã—Ç–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å)
            multi_day_events = Content.objects.filter(
                Q(date_start__isnull=False)
                & Q(date_end__isnull=False)
                & ~Q(date_start=F("date_end"))  # –ò—Å–∫–ª—é—á–∞–µ–º –æ–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                & Q(date_end__lt=today)  # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è, –∑–∞–∫–æ–Ω—á–∏–≤—à–∏–µ—Å—è –î–û —Å–µ–≥–æ–¥–Ω—è
            )

            # 2. –û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
            single_day_no_end = Content.objects.filter(
                Q(date_start__isnull=False)
                & Q(date_end__isnull=True)
                & Q(
                    date_start__lt=today
                )  # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏—Å—å –î–û —Å–µ–≥–æ–¥–Ω—è
            )

            # 3. –û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –¥–∞—Ç–∞–º–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            single_day_same_dates = Content.objects.filter(
                Q(date_start__isnull=False)
                & Q(date_end__isnull=False)
                & Q(date_start=F("date_end"))
                & Q(date_start__lt=today)  # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –î–û —Å–µ–≥–æ–¥–Ω—è
            )

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            multi_day_list = list(
                multi_day_events.values("id", "name", "date_start", "date_end")
            )
            single_no_end_list = list(
                single_day_no_end.values("id", "name", "date_start")
            )
            single_same_dates_list = list(
                single_day_same_dates.values("id", "name", "date_start", "date_end")
            )

            self.stdout.write(
                f"üìä Found {len(multi_day_list)} multi-day events to delete"
            )
            self.stdout.write(
                f"üìä Found {len(single_no_end_list)} single-day events (no end date) to delete"
            )
            self.stdout.write(
                f"üìä Found {len(single_same_dates_list)} single-day events (same dates) to delete"
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
            if multi_day_list:
                self.stdout.write("üóÇÔ∏è Multi-day events:")
                for event in multi_day_list[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    self.stdout.write(
                        f"  - {event['name'][:50]}... ({event['date_start']} - {event['date_end']})"
                    )
                if len(multi_day_list) > 5:
                    self.stdout.write(f"  ... –∏ –µ—â–µ {len(multi_day_list) - 5}")

            if single_no_end_list:
                self.stdout.write("üìÖ Single-day events (no end):")
                for event in single_no_end_list[:5]:
                    self.stdout.write(
                        f"  - {event['name'][:50]}... ({event['date_start']})"
                    )
                if len(single_no_end_list) > 5:
                    self.stdout.write(f"  ... –∏ –µ—â–µ {len(single_no_end_list) - 5}")

            if single_same_dates_list:
                self.stdout.write("üìÜ Single-day events (same dates):")
                for event in single_same_dates_list[:5]:
                    self.stdout.write(
                        f"  - {event['name'][:50]}... ({event['date_start']})"
                    )
                if len(single_same_dates_list) > 5:
                    self.stdout.write(f"  ... –∏ –µ—â–µ {len(single_same_dates_list) - 5}")

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
            all_events = multi_day_events | single_day_no_end | single_day_same_dates
            total_count = all_events.count()

            if dry_run:
                self.stdout.write(
                    self.style.WARNING(f"üîç DRY RUN: Would delete {total_count} events")
                )
                return

            if total_count == 0:
                self.stdout.write(self.style.SUCCESS("‚úÖ No outdated events found"))
                return

            # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
            deleted_count, details = all_events.delete()

            self.stdout.write(
                self.style.SUCCESS(
                    f"‚úÖ Successfully deleted {deleted_count} events with outdated dates"
                )
            )
            self.stdout.write(f"üìã Deletion details: {details}")

            logger.info(f"Cleanup completed: deleted {deleted_count} events")

        except Exception as exc:
            error_msg = f"‚ùå Error in cleanup: {exc}"
            self.stdout.write(self.style.ERROR(error_msg))
            logger.error(error_msg, exc_info=True)
            raise
