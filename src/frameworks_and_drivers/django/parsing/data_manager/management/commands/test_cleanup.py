from django.core.management.base import BaseCommand
from frameworks_and_drivers.django.parsing.tasks import delete_outdated_events
import uuid
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π"

    def add_arguments(self, parser):
        parser.add_argument(
            "--sync",
            action="store_true",
            help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–±–µ–∑ Celery)",
        )

    def handle(self, *args, **options):
        if options["sync"]:
            self.stdout.write("üîÑ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ...")
            try:
                result = delete_outdated_events()
                self.stdout.write(self.style.SUCCESS(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result}"))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"))
        else:
            self.stdout.write("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ Celery...")
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                unique_id = str(uuid.uuid4())
                result = delete_outdated_events.apply_async(task_id=unique_id)

                self.stdout.write(
                    self.style.SUCCESS(
                        f"‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å:\n"
                        f"   Task ID: {result.task_id}\n"
                        f"   Status: {result.status}\n\n"
                        f"üìã –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
                        f"   docker compose logs -f celery-worker-parsing"
                    )
                )
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"))
