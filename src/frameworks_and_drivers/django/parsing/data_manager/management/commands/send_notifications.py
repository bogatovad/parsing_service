import logging
import os
import sys
import requests
from django.core.management.base import BaseCommand
from django.utils import timezone
from django.db.models import Q
from pyrogram import Client
from pyrogram.raw.functions.contacts import ResolveUsername
from pydantic_settings import BaseSettings, SettingsConfigDict

logger = logging.getLogger(__name__)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Telegram
class TelegramSettings(BaseSettings):
    BOT_TOKEN: str = "7517129777:AAHtVmXMsaa130ebt5HyPFgkWoYRWJgfZt4"
    API_ID: str = "18640708"
    API_HASH: str = "202b12968ca21dbf7c7049bb657f81d1"
    model_config = SettingsConfigDict()


class Command(BaseCommand):
    help = "Send event notifications to users about their favorite events today"

    def add_arguments(self, parser):
        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="Show what notifications would be sent without actually sending them",
        )

    def handle(self, *args, **options):
        dry_run = options["dry_run"]

        try:
            settings = TelegramSettings()
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram: {e}")
            )
            return

        try:
            self.stdout.write("üì± Starting event notifications task")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Pyrogram
            pyrogram_client = Client(
                "notification_bot",
                api_id=settings.API_ID,
                api_hash=settings.API_HASH,
                bot_token=settings.BOT_TOKEN,
                app_version="7.7.2",
                device_model="Lenovo Z6 Lite",
                system_version="11 R",
            )

            def resolve_username_to_user_id(username: str) -> int | None:
                if dry_run:
                    self.stdout.write(f"üîç DRY RUN: Would resolve username {username}")
                    return 12345  # Mock ID for dry run

                with pyrogram_client:
                    try:
                        r = pyrogram_client.invoke(ResolveUsername(username=username))
                        if r.users:
                            return r.users[0].id
                        return None
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –¥–ª—è {username}: {e}")
                        return None

            def send_telegram_message(chat_id: int, message: str) -> bool:
                if dry_run:
                    self.stdout.write(f"üîç DRY RUN: Would send message to {chat_id}:")
                    self.stdout.write(f"Message: {message[:100]}...")
                    return True

                """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram HTTP API"""
                try:
                    url = (
                        f"https://api.telegram.org/bot{settings.BOT_TOKEN}/sendMessage"
                    )
                    payload = {
                        "chat_id": chat_id,
                        "text": message,
                        "parse_mode": "HTML",
                        "disable_web_page_preview": False,
                    }
                    response = requests.post(url, json=payload)
                    return response.status_code == 200
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    return False

            def format_event_dates(event) -> str:
                """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç —Å–æ–±—ã—Ç–∏—è"""
                if not event.date_end or event.date_start == event.date_end:
                    return f"üìÖ {event.date_start.strftime('%d.%m.%Y')}"
                return f"üìÖ {event.date_start.strftime('%d.%m.%Y')} - {event.date_end.strftime('%d.%m.%Y')}"

            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            today = timezone.now().date()
            self.stdout.write(f"üìÖ –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ {today}")

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                main_project_path = "/app"  # –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                if main_project_path not in sys.path:
                    sys.path.append(main_project_path)

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                os.environ.setdefault("DJANGO_SETTINGS_MODULE", "event_afisha.settings")
                os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"

                import django

                django.setup()

                from frameworks_and_drivers.django.parsing.data_manager.models import (
                    Like,
                )

            except ImportError as e:
                self.stdout.write(
                    self.style.ERROR(
                        f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: {e}"
                    )
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è
            today_likes = Like.objects.select_related("user", "content").filter(
                Q(
                    # –û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    Q(content__date_end__isnull=True) & Q(content__date_start=today)
                )
                | Q(
                    # –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                    Q(content__date_start__lte=today) & Q(content__date_end__gte=today)
                ),
                value=True,  # –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∞–π–∫–∏ (–∏–∑–±—Ä–∞–Ω–Ω–æ–µ)
            )

            self.stdout.write(
                f"‚ù§Ô∏è –ù–∞–π–¥–µ–Ω–æ {today_likes.count()} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            )

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_events = {}
            for like in today_likes:
                if like.user not in user_events:
                    user_events[like.user] = []
                user_events[like.user].append(like.content)

            self.stdout.write(
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏: {len(user_events)}"
            )

            if dry_run:
                self.stdout.write(self.style.WARNING("üîç DRY RUN MODE"))
                for user, events in user_events.items():
                    self.stdout.write(
                        f"  User: {user.username} - Events: {len(events)}"
                    )
                    for event in events[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–æ–±—ã—Ç–∏—è
                        self.stdout.write(f"    - {event.name[:50]}...")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            sent_count = 0
            error_count = 0

            for user, events in user_events.items():
                try:
                    # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    telegram_id = resolve_username_to_user_id(user.username)
                    if not telegram_id:
                        self.stdout.write(
                            self.style.WARNING(
                                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID –¥–ª—è {user.username}"
                            )
                        )
                        error_count += 1
                        continue

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    message = (
                        "üéâ –ü—Ä–∏–≤–µ—Ç! –£ –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
                    )

                    for event in events:
                        message += f"<b>{event.name}</b>\n"
                        message += f"{format_event_dates(event)}\n"

                        if event.time:
                            message += f"‚è∞ –í—Ä–µ–º—è: {event.time}\n"
                        if event.location:
                            message += f"üìç –ú–µ—Å—Ç–æ: {event.location}\n"

                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
                        event_link = (
                            f"https://t.me/EventAfishaBot/strelka?startapp={event.id}"
                        )
                        message += (
                            f"üîó <a href='{event_link}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</a>\n\n"
                        )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if send_telegram_message(telegram_id, message):
                        self.stdout.write(
                            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}"
                        )
                        sent_count += 1
                    else:
                        self.stdout.write(
                            self.style.ERROR(
                                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}"
                            )
                        )
                        error_count += 1

                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(
                            f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {e}"
                        )
                    )
                    error_count += 1
                    continue

            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            self.stdout.write("\nüìä –û—Ç—á–µ—Ç –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
            self.stdout.write(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")
            self.stdout.write(f"  ‚ùå –û—à–∏–±–∫–∏: {error_count}")
            self.stdout.write(f"  üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_events)}")
            self.stdout.write(
                f"  üé≠ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {sum(len(events) for events in user_events.values())}"
            )

            if error_count == 0:
                self.stdout.write(
                    self.style.SUCCESS("üéâ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                )
            elif sent_count > 0:
                self.stdout.write(
                    self.style.WARNING("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏")
                )
            else:
                self.stdout.write(
                    self.style.ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                )

            logger.info(
                f"Notifications task completed: {sent_count} sent, {error_count} errors"
            )

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}"
            self.stdout.write(self.style.ERROR(error_msg))
            logger.error(error_msg, exc_info=True)
            raise
