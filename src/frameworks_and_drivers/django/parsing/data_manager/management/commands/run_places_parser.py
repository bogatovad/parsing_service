from django.core.management.base import BaseCommand

from usecases.places.run_places_usecase import GetPlacesUsecase
from frameworks_and_drivers.gateways.nlp_gateway.nlp_processor_gateway import (
    NLPProcessor,
)
from frameworks_and_drivers.repositories.content_repository import (
    DjangoContentRepository,
)


class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –º–µ—Å—Ç (Places) –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–∞—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"

    def add_arguments(self, parser):
        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS("üè¢ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –º–µ—Å—Ç..."))

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            nlp_processor = NLPProcessor()
            content_repo = DjangoContentRepository()

            # –°–æ–∑–¥–∞–µ–º usecase (gateway –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ places parser)
            places_usecase = GetPlacesUsecase(
                gateway=None,  # Places parser –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç gateway
                nlp_processor=nlp_processor,
                content_repo=content_repo,
                file_repo=None,
            )

            if options["dry_run"]:
                self.stdout.write(
                    "üîç –†–µ–∂–∏–º dry-run: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏..."
                )

                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ unique_ids
                unique_ids = content_repo.get_all_unique_ids()

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç
                from usecases.places.data import arr

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞
                new_places_count = 0
                places_with_images = 0

                for place in arr:
                    unique_id = str(place["id"]) + "place"
                    if unique_id not in unique_ids:
                        new_places_count += 1
                        if place.get("image"):
                            places_with_images += 1

                self.stdout.write("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                self.stdout.write(f"   ‚Ä¢ –í—Å–µ–≥–æ –º–µ—Å—Ç –≤ –¥–∞–Ω–Ω—ã—Ö: {len(arr)}")
                self.stdout.write(
                    f'   ‚Ä¢ –£–∂–µ –≤ –±–∞–∑–µ: {len([uid for uid in unique_ids if uid.endswith("place")])}'
                )
                self.stdout.write(f"   ‚Ä¢ –ù–æ–≤—ã—Ö –º–µ—Å—Ç: {new_places_count}")
                self.stdout.write(
                    f"   ‚Ä¢ –ù–æ–≤—ã—Ö –º–µ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {places_with_images}"
                )
                self.stdout.write(
                    f"   ‚Ä¢ –ë—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ (–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π): {new_places_count - places_with_images}"
                )

            else:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
                self.stdout.write("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ—Å—Ç...")
                places_usecase.execute()
                self.stdout.write(
                    self.style.SUCCESS("‚úÖ –ü–∞—Ä—Å–µ—Ä –º–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                )

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ –º–µ—Å—Ç: {str(e)}")
            )
            raise e
