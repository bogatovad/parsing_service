"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤
"""

from django.core.management.base import BaseCommand
from frameworks_and_drivers.django.parsing.celery_tasks import (
    parse_kudago,
    parse_timepad,
    parse_telegram,
    parse_vk,
    parse_places,
    run_main_parsers,
    run_all_parsers,
)
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä—ã –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

    def add_arguments(self, parser):
        parser.add_argument(
            "parsers",
            nargs="*",
            choices=["kudago", "timepad", "telegram", "vk", "places", "main", "all"],
            help="–ö–∞–∫–∏–µ –ø–∞—Ä—Å–µ—Ä—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: main)",
        )
        parser.add_argument(
            "--async",
            action="store_true",
            help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ Celery (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)",
        )

    def handle(self, *args, **options):
        parsers = options["parsers"] or ["main"]
        is_async = options["async"]

        self.stdout.write(
            self.style.SUCCESS(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã: {', '.join(parsers)}")
        )

        if is_async:
            self.stdout.write("‚ö° –†–µ–∂–∏–º: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (—á–µ—Ä–µ–∑ Celery)")
        else:
            self.stdout.write("üîÑ –†–µ–∂–∏–º: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (–æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)")

        self.stdout.write("-" * 50)

        for parser_name in parsers:
            try:
                self.stdout.write(f"\nüì¶ –ó–∞–ø—É—Å–∫–∞–µ–º {parser_name}...")

                if parser_name == "kudago":
                    result = self._run_parser(parse_kudago, is_async, "KudaGo")
                elif parser_name == "timepad":
                    result = self._run_parser(parse_timepad, is_async, "Timepad")
                elif parser_name == "telegram":
                    result = self._run_parser(parse_telegram, is_async, "Telegram")
                elif parser_name == "vk":
                    result = self._run_parser(parse_vk, is_async, "VK")
                elif parser_name == "places":
                    result = self._run_parser(parse_places, is_async, "Places")
                elif parser_name == "main":
                    result = self._run_parser(
                        run_main_parsers,
                        is_async,
                        "Main Parsers (KudaGo‚ÜíTimepad‚ÜíTelegram‚ÜíVK)",
                    )
                elif parser_name == "all":
                    result = self._run_parser(
                        run_all_parsers, is_async, "All Parsers (–≤–∫–ª—é—á–∞—è Places)"
                    )

                if is_async:
                    self.stdout.write(
                        self.style.SUCCESS(
                            f"‚úÖ {parser_name} –∑–∞–ø—É—â–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ. Task ID: {result.id}"
                        )
                    )
                else:
                    if result:
                        self.stdout.write(
                            self.style.SUCCESS(f"‚úÖ {parser_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        )
                    else:
                        self.stdout.write(
                            self.style.ERROR(f"‚ùå {parser_name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π")
                        )

            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {parser_name}: {str(e)}")
                )
                logger.error(
                    f"Error running parser {parser_name}: {str(e)}", exc_info=True
                )

        self.stdout.write("\n" + "=" * 50)
        self.stdout.write(self.style.SUCCESS("üéâ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!"))

        if not is_async:
            self.stdout.write(
                "\nüí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --async –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Celery"
            )

    def _run_parser(self, parser_func, is_async, display_name):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–ª–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        if is_async:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Celery
            return parser_func.delay()
        else:
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
            self.stdout.write(f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {display_name}...")
            return parser_func()
