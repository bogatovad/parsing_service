"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤
"""

import logging
from django.core.management.base import BaseCommand
from frameworks_and_drivers.django.parsing.celery_tasks import (
    run_main_parsers,
    run_all_parsers,
)
from interface_adapters.controlles.content_controller import (
    GetContentTimepadController,
    GetContentTgController,
    GetContentKudaGoController,
    GetContentVKController,
)
from interface_adapters.controlles.factory import UseCaseFactory

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = "Run content parsers"

    def add_arguments(self, parser):
        parser.add_argument(
            "--parser",
            type=str,
            choices=["kudago", "timepad", "telegram", "vk", "all"],
            default="all",
            help="Which parser to run (default: all)",
        )
        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="Show what parsers would run without actually running them",
        )

    def handle(self, *args, **options):
        parser_name = options["parser"]
        dry_run = options["dry_run"]

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
        factory_usecase = UseCaseFactory()

        parsers = {
            "kudago": (
                "KudaGo",
                GetContentKudaGoController(usecase_factory=factory_usecase),
            ),
            "timepad": (
                "Timepad",
                GetContentTimepadController(usecase_factory=factory_usecase),
            ),
            "telegram": (
                "Telegram",
                GetContentTgController(usecase_factory=factory_usecase),
            ),
            "vk": ("VK", GetContentVKController(usecase_factory=factory_usecase)),
        }

        if parser_name == "all":
            selected_parsers = parsers.items()
        else:
            selected_parsers = [(parser_name, parsers[parser_name])]

        self.stdout.write("üöÄ Starting parsers execution")

        if dry_run:
            self.stdout.write(self.style.WARNING("üîç DRY RUN MODE"))
            for parser_key, (parser_display_name, _) in selected_parsers:
                self.stdout.write(f"  Would run: {parser_display_name}")
            return

        results = []

        for parser_key, (parser_display_name, controller) in selected_parsers:
            try:
                self.stdout.write(f"‚ñ∂Ô∏è  Starting {parser_display_name} parser...")
                controller.get_content()
                self.stdout.write(
                    self.style.SUCCESS(
                        f"‚úÖ {parser_display_name} parser completed successfully"
                    )
                )
                results.append({"parser": parser_display_name, "status": "success"})
                logger.info(f"{parser_display_name} parser finished successfully")

            except Exception as e:
                error_msg = f"‚ùå Error in {parser_display_name} parser: {str(e)}"
                self.stdout.write(self.style.ERROR(error_msg))
                results.append(
                    {"parser": parser_display_name, "status": "error", "error": str(e)}
                )
                logger.error(f"Error in {parser_display_name} parser: {str(e)}")

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        successful = len([r for r in results if r["status"] == "success"])
        failed = len([r for r in results if r["status"] == "error"])

        self.stdout.write("\nüìä Execution Summary:")
        self.stdout.write(f"  ‚úÖ Successful: {successful}")
        self.stdout.write(f"  ‚ùå Failed: {failed}")

        if failed > 0:
            self.stdout.write("\nüîç Failed parsers:")
            for result in results:
                if result["status"] == "error":
                    self.stdout.write(f"  - {result['parser']}: {result['error']}")

        logger.info(
            f"Parsers execution completed: {successful} successful, {failed} failed"
        )

    def _run_parser(self, parser_key, celery_func, is_async, display_name):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–ª–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        if is_async:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Celery
            return celery_func.delay()
        else:
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            self.stdout.write(f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {display_name}...")
            try:
                controller = self.controllers[parser_key]
                result = controller.get_content()
                self.stdout.write(f"‚úÖ {display_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return result
            except Exception as e:
                self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ –≤ {display_name}: {str(e)}")
                logger.error(f"Error in {display_name}: {str(e)}", exc_info=True)
                return False

    def _run_main_parsers(self, is_async):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
        if is_async:
            return run_main_parsers.delay()
        else:
            self.stdout.write(
                "‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤..."
            )
            parsers_order = ["kudago", "timepad", "telegram", "vk"]
            results = []

            for parser_name in parsers_order:
                self.stdout.write(f"\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º {parser_name.upper()}...")
                try:
                    controller = self.controllers[parser_name]
                    result = controller.get_content()
                    if result:
                        self.stdout.write(f"‚úÖ {parser_name.upper()} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    else:
                        self.stdout.write(
                            f"‚ö†Ô∏è {parser_name.upper()} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
                        )
                    results.append(result)
                except Exception as e:
                    self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ –≤ {parser_name.upper()}: {str(e)}")
                    logger.error(f"Error in {parser_name}: {str(e)}", exc_info=True)
                    results.append(False)

            return all(results)

    def _run_all_parsers(self, is_async):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –≤–∫–ª—é—á–∞—è Places"""
        if is_async:
            return run_all_parsers.delay()
        else:
            self.stdout.write("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤...")
            parsers_order = ["kudago", "timepad", "telegram", "vk", "places"]
            results = []

            for parser_name in parsers_order:
                self.stdout.write(f"\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º {parser_name.upper()}...")
                try:
                    controller = self.controllers[parser_name]
                    result = controller.get_content()
                    if result:
                        self.stdout.write(f"‚úÖ {parser_name.upper()} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    else:
                        self.stdout.write(
                            f"‚ö†Ô∏è {parser_name.upper()} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
                        )
                    results.append(result)
                except Exception as e:
                    self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ –≤ {parser_name.upper()}: {str(e)}")
                    logger.error(f"Error in {parser_name}: {str(e)}", exc_info=True)
                    results.append(False)

            return all(results)
