"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
"""

from django.core.management.base import BaseCommand
from frameworks_and_drivers.django.parsing.celery_tasks import delete_outdated_events
from frameworks_and_drivers.django.parsing.data_manager.models import Content
from django.utils import timezone
from datetime import timedelta
from django.db.models import Q, F
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = "–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

    def add_arguments(self, parser):
        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å",
        )
        parser.add_argument(
            "--async",
            action="store_true",
            help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ Celery (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)",
        )
        parser.add_argument(
            "--days",
            type=int,
            default=1,
            help="–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ)",
        )
        parser.add_argument(
            "--stats", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π"
        )

    def handle(self, *args, **options):
        dry_run = options["dry_run"]
        is_async = options["async"]
        days_threshold = options["days"]
        show_stats = options["stats"]

        self.stdout.write(self.style.SUCCESS("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"))

        if dry_run:
            self.stdout.write("üîç –†–µ–∂–∏–º: DRY RUN (—Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, –Ω–µ —É–¥–∞–ª—è—Ç—å)")
        elif is_async:
            self.stdout.write("‚ö° –†–µ–∂–∏–º: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (—á–µ—Ä–µ–∑ Celery)")
        else:
            self.stdout.write("üîÑ –†–µ–∂–∏–º: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (–æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)")

        self.stdout.write(f"üìÖ –ü–æ—Ä–æ–≥: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å—Ç–∞—Ä—à–µ {days_threshold} –¥–Ω–µ–π")
        self.stdout.write("-" * 50)

        if show_stats or dry_run:
            self._show_stats(days_threshold)

        if dry_run:
            self.stdout.write("\n" + "=" * 50)
            self.stdout.write(
                self.style.WARNING("üîç DRY RUN –∑–∞–≤–µ—Ä—à–µ–Ω - –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ")
            )
            self.stdout.write("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
            return

        try:
            if is_async:
                self.stdout.write("\n‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ...")
                result = delete_outdated_events.delay()
                self.stdout.write(
                    self.style.SUCCESS(
                        f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ. Task ID: {result.id}"
                    )
                )
                self.stdout.write("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Celery –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            else:
                self.stdout.write("\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ...")
                result = delete_outdated_events()

                if result:
                    self.stdout.write(
                        self.style.SUCCESS("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    )
                    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
                    self.stdout.write("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
                    self._show_current_stats()
                else:
                    self.stdout.write(
                        self.style.ERROR("‚ùå –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
                    )

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")
            )
            logger.error(f"Error running cleanup: {str(e)}", exc_info=True)

        self.stdout.write("\n" + "=" * 50)
        self.stdout.write(self.style.SUCCESS("üéâ –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"))

    def _show_stats(self, days_threshold):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ delete_outdated_events)"""
        try:
            self.stdout.write("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:")

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Content –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ)
            total_events = Content.objects.count()
            self.stdout.write(f"üìà –í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {total_events}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            today = timezone.now().date()
            threshold_date = today - timedelta(days=days_threshold)

            self.stdout.write(f"üìÖ –°–µ–≥–æ–¥–Ω—è (UTC): {today}")
            self.stdout.write(f"üóìÔ∏è  –ü–æ—Ä–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è: {threshold_date}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ —Ç–æ–π –∂–µ –ª–æ–≥–∏–∫–µ —á—Ç–æ –≤ delete_outdated_events
            multi_day_events, single_day_no_end, single_day_same_dates = (
                self._get_events_for_deletion(threshold_date)
            )

            total_to_delete = (
                multi_day_events.count()
                + single_day_no_end.count()
                + single_day_same_dates.count()
            )

            self.stdout.write(
                f"üóëÔ∏è  –ö —É–¥–∞–ª–µ–Ω–∏—é (—Å—Ç–∞—Ä—à–µ {days_threshold} –¥–Ω–µ–π): {total_to_delete}"
            )
            self.stdout.write(
                f"   ‚Ä¢ –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ (–∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å): {multi_day_events.count()}"
            )
            self.stdout.write(
                f"   ‚Ä¢ –û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ (–±–µ–∑ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è): {single_day_no_end.count()}"
            )
            self.stdout.write(
                f"   ‚Ä¢ –û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞—Ç—ã): {single_day_same_dates.count()}"
            )

            # –ë—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            future_events = Content.objects.filter(date_start__gt=today).count()
            self.stdout.write(f"üöÄ –ë—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {future_events}")

            # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è
            today_events = Content.objects.filter(date_start=today).count()
            self.stdout.write(f"üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è: {today_events}")

            if total_to_delete > 0:
                self.stdout.write("\nüîç –ü—Ä–∏–º–µ—Ä—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∫ —É–¥–∞–ª–µ–Ω–∏—é:")

                # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                for event in multi_day_events[:3]:
                    end_date_str = (
                        f" - {event.date_end.strftime('%d.%m.%Y')}"
                        if event.date_end
                        else ""
                    )
                    self.stdout.write(
                        f"  ‚Ä¢ [–ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω–æ–µ] {event.name[:40]}... "
                        f"({event.date_start.strftime('%d.%m.%Y')}{end_date_str})"
                    )

                for event in single_day_no_end[:2]:
                    self.stdout.write(
                        f"  ‚Ä¢ [–û–¥–Ω–æ–¥–Ω–µ–≤–Ω–æ–µ] {event.name[:40]}... "
                        f"({event.date_start.strftime('%d.%m.%Y')})"
                    )

                if total_to_delete > 5:
                    self.stdout.write(f"  ... –∏ –µ—â—ë {total_to_delete - 5} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            )

    def _show_current_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏"""
        try:
            total_events = Content.objects.count()
            self.stdout.write(f"üìà –í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {total_events}")

            today = timezone.now().date()

            future_events = Content.objects.filter(date_start__gt=today).count()
            self.stdout.write(f"üöÄ –ë—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {future_events}")

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            )

    def _get_events_for_deletion(self, threshold_date):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –¢–û–ß–ù–û —Ç–æ–π –∂–µ –ª–æ–≥–∏–∫–µ —á—Ç–æ –∏ –≤ delete_outdated_events"""

        # –¢–û–ß–ù–û —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –≤ delete_outdated_events –∑–∞–¥–∞—á–µ:

        # 1. –°–æ–±—ã—Ç–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å)
        multi_day_events = Content.objects.filter(
            Q(date_start__isnull=False)
            & Q(date_end__isnull=False)
            & ~Q(date_start=F("date_end"))  # –ò—Å–∫–ª—é—á–∞–µ–º –æ–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            & Q(date_end__lte=threshold_date)  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å __lt –Ω–∞ __lte (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
        )

        # 2. –û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
        single_day_no_end = Content.objects.filter(
            Q(date_start__isnull=False)
            & Q(date_end__isnull=True)
            & Q(
                date_start__lte=threshold_date
            )  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å __lt –Ω–∞ __lte (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
        )

        # 3. –û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –¥–∞—Ç–∞–º–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        single_day_same_dates = Content.objects.filter(
            Q(date_start__isnull=False)
            & Q(date_end__isnull=False)
            & Q(date_start=F("date_end"))
            & Q(
                date_start__lte=threshold_date
            )  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å __lt –Ω–∞ __lte (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
        )

        return multi_day_events, single_day_no_end, single_day_same_dates
