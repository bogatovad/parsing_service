from django.core.management.base import BaseCommand
from frameworks_and_drivers.django.parsing.tasks import (
    setup_all_schedules,
)
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á: –ø–∞—Ä—Å–µ—Ä—ã, –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"

    def add_arguments(self, parser):
        parser.add_argument(
            "--only",
            choices=["parsers", "cleanup", "notifications", "all"],
            default="all",
            help="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: all)",
        )

    def handle(self, *args, **options):
        try:
            only = options["only"]

            if only == "all":
                self.stdout.write(
                    self.style.SUCCESS("–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...")
                )

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                setup_all_schedules()

                self.stdout.write(
                    self.style.SUCCESS(
                        "‚úÖ –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n"
                        "üìÖ –ü–ê–†–°–ï–†–´:\n"
                        "- –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 8:00 MSK (KudaGo ‚Üí Timepad ‚Üí Telegram ‚Üí VK)\n\n"
                        "üì© –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:\n"
                        "- –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00 MSK (–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö)\n\n"
                        "üßπ –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –°–û–ë–´–¢–ò–ô:\n"
                        "- –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00 MSK (–ø–æ–ª–Ω–æ—á—å)\n\n"
                        "‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É.\n"
                        "–í—Å–µ –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                    )
                )
            elif only == "parsers":
                from frameworks_and_drivers.django.parsing.tasks import (
                    setup_main_parsers_schedule,
                )

                self.stdout.write(
                    self.style.SUCCESS("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–≤...")
                )
                setup_main_parsers_schedule()
                self.stdout.write(
                    self.style.SUCCESS("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")
                )
            elif only == "cleanup":
                from frameworks_and_drivers.django.parsing.tasks import (
                    setup_cleanup_schedule,
                )

                self.stdout.write(
                    self.style.SUCCESS("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏...")
                )
                setup_cleanup_schedule()
                self.stdout.write(
                    self.style.SUCCESS("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")
                )
            elif only == "notifications":
                from frameworks_and_drivers.django.parsing.tasks import (
                    setup_notifications_schedule,
                )

                self.stdout.write(
                    self.style.SUCCESS("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
                )
                setup_notifications_schedule()
                self.stdout.write(
                    self.style.SUCCESS("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")
                )

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
            )
            logger.error(f"Error in setup_schedule command: {str(e)}", exc_info=True)
